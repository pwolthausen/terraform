
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_global_address.gke_ingress will be created
  + resource "google_compute_global_address" "gke_ingress" {
      + address            = (known after apply)
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "orypoc"
      + project            = (known after apply)
      + self_link          = (known after apply)
    }

  # google_compute_global_address.private_ip_address will be created
  + resource "google_compute_global_address" "private_ip_address" {
      + address            = (known after apply)
      + address_type       = "INTERNAL"
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + label_fingerprint  = (known after apply)
      + name               = "postgres-ip-address"
      + network            = (known after apply)
      + prefix_length      = 16
      + project            = (known after apply)
      + purpose            = "VPC_PEERING"
      + self_link          = (known after apply)
    }

  # google_compute_router.router will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "pw-router"
      + network            = (known after apply)
      + project            = (known after apply)
      + region             = "northamerica-northeast1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + asn                = 64514
          + keepalive_interval = 20
        }
    }

  # google_compute_router_nat.nat will be created
  + resource "google_compute_router_nat" "nat" {
      + enable_dynamic_port_allocation      = (known after apply)
      + enable_endpoint_independent_mapping = true
      + icmp_idle_timeout_sec               = 30
      + id                                  = (known after apply)
      + name                                = "pw-router-nat"
      + nat_ip_allocate_option              = "AUTO_ONLY"
      + project                             = (known after apply)
      + region                              = "northamerica-northeast1"
      + router                              = "pw-router"
      + source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      + tcp_established_idle_timeout_sec    = 1200
      + tcp_transitory_idle_timeout_sec     = 30
      + udp_idle_timeout_sec                = 30

      + log_config {
          + enable = true
          + filter = "ERRORS_ONLY"
        }
    }

  # google_container_cluster.primary will be created
  + resource "google_container_cluster" "primary" {
      + cluster_ipv4_cidr           = (known after apply)
      + datapath_provider           = (known after apply)
      + default_max_pods_per_node   = 20
      + enable_binary_authorization = false
      + enable_intranode_visibility = (known after apply)
      + enable_kubernetes_alpha     = false
      + enable_l4_ilb_subsetting    = false
      + enable_legacy_abac          = false
      + enable_shielded_nodes       = true
      + enable_tpu                  = (known after apply)
      + endpoint                    = (known after apply)
      + id                          = (known after apply)
      + initial_node_count          = 1
      + label_fingerprint           = (known after apply)
      + location                    = "northamerica-northeast1"
      + logging_service             = (known after apply)
      + master_version              = (known after apply)
      + monitoring_service          = (known after apply)
      + name                        = "gke-pw-nane1-01"
      + network                     = "default"
      + networking_mode             = "VPC_NATIVE"
      + node_locations              = (known after apply)
      + node_version                = (known after apply)
      + operation                   = (known after apply)
      + private_ipv6_google_access  = (known after apply)
      + project                     = "cloudops-pwolthausen-sandbox"
      + remove_default_node_pool    = true
      + resource_labels             = {
          + "env" = "test"
        }
      + self_link                   = (known after apply)
      + services_ipv4_cidr          = (known after apply)
      + subnetwork                  = (known after apply)
      + tpu_ipv4_cidr_block         = (known after apply)

      + addons_config {
          + cloudrun_config {
              + disabled           = (known after apply)
              + load_balancer_type = (known after apply)
            }

          + config_connector_config {
              + enabled = (known after apply)
            }

          + dns_cache_config {
              + enabled = (known after apply)
            }

          + gce_persistent_disk_csi_driver_config {
              + enabled = (known after apply)
            }

          + gcp_filestore_csi_driver_config {
              + enabled = (known after apply)
            }

          + gke_backup_agent_config {
              + enabled = (known after apply)
            }

          + horizontal_pod_autoscaling {
              + disabled = (known after apply)
            }

          + http_load_balancing {
              + disabled = (known after apply)
            }

          + istio_config {
              + auth     = (known after apply)
              + disabled = (known after apply)
            }

          + kalm_config {
              + enabled = (known after apply)
            }

          + network_policy_config {
              + disabled = (known after apply)
            }
        }

      + authenticator_groups_config {
          + security_group = (known after apply)
        }

      + cluster_autoscaling {
          + autoscaling_profile = (known after apply)
          + enabled             = (known after apply)

          + auto_provisioning_defaults {
              + boot_disk_kms_key = (known after apply)
              + disk_size         = (known after apply)
              + disk_type         = (known after apply)
              + image_type        = (known after apply)
              + min_cpu_platform  = (known after apply)
              + oauth_scopes      = (known after apply)
              + service_account   = (known after apply)

              + management {
                  + auto_repair     = (known after apply)
                  + auto_upgrade    = (known after apply)
                  + upgrade_options = (known after apply)
                }

              + shielded_instance_config {
                  + enable_integrity_monitoring = (known after apply)
                  + enable_secure_boot          = (known after apply)
                }
            }

          + resource_limits {
              + maximum       = (known after apply)
              + minimum       = (known after apply)
              + resource_type = (known after apply)
            }
        }

      + cluster_telemetry {
          + type = (known after apply)
        }

      + confidential_nodes {
          + enabled = (known after apply)
        }

      + cost_management_config {
          + enabled = (known after apply)
        }

      + database_encryption {
          + key_name = (known after apply)
          + state    = (known after apply)
        }

      + default_snat_status {
          + disabled = true
        }

      + identity_service_config {
          + enabled = (known after apply)
        }

      + ip_allocation_policy {
          + cluster_ipv4_cidr_block       = (known after apply)
          + cluster_secondary_range_name  = "pod-cidr"
          + services_ipv4_cidr_block      = (known after apply)
          + services_secondary_range_name = "service-cidr-0"
        }

      + logging_config {
          + enable_components = (known after apply)
        }

      + master_auth {
          + client_certificate     = (known after apply)
          + client_key             = (sensitive value)
          + cluster_ca_certificate = (known after apply)

          + client_certificate_config {
              + issue_client_certificate = (known after apply)
            }
        }

      + master_authorized_networks_config {
          + gcp_public_cidrs_access_enabled = (known after apply)

          + cidr_blocks {
              + cidr_block   = "108.168.1.156/32"
              + display_name = "march"
            }
          + cidr_blocks {
              + cidr_block   = "142.115.192.104/32"
              + display_name = "patw"
            }
          + cidr_blocks {
              + cidr_block   = "192.226.191.99/32"
              + display_name = "josh"
            }
          + cidr_blocks {
              + cidr_block   = "76.71.76.207/32"
              + display_name = "akshit"
            }
          + cidr_blocks {
              + cidr_block   = "99.246.238.174/32"
              + display_name = "dammy"
            }
        }

      + mesh_certificates {
          + enable_certificates = (known after apply)
        }

      + monitoring_config {
          + enable_components = (known after apply)

          + managed_prometheus {
              + enabled = (known after apply)
            }
        }

      + network_policy {
          + enabled = true
        }

      + node_config {
          + disk_size_gb      = (known after apply)
          + disk_type         = (known after apply)
          + guest_accelerator = (known after apply)
          + image_type        = (known after apply)
          + labels            = (known after apply)
          + local_ssd_count   = (known after apply)
          + logging_variant   = "DEFAULT"
          + machine_type      = (known after apply)
          + metadata          = (known after apply)
          + min_cpu_platform  = (known after apply)
          + oauth_scopes      = [
              + "https://www.googleapis.com/auth/cloud-platform",
            ]
          + preemptible       = false
          + service_account   = "80612684543-compute@developer.gserviceaccount.com"
          + spot              = false
          + tags              = [
              + "gke-bell-network-common-nbd-gke-npe-cluster",
            ]
          + taint             = (known after apply)

          + shielded_instance_config {
              + enable_integrity_monitoring = (known after apply)
              + enable_secure_boot          = (known after apply)
            }

          + workload_metadata_config {
              + mode = (known after apply)
            }
        }

      + node_pool {
          + initial_node_count          = (known after apply)
          + instance_group_urls         = (known after apply)
          + managed_instance_group_urls = (known after apply)
          + max_pods_per_node           = (known after apply)
          + name                        = (known after apply)
          + name_prefix                 = (known after apply)
          + node_count                  = (known after apply)
          + node_locations              = (known after apply)
          + version                     = (known after apply)

          + autoscaling {
              + location_policy      = (known after apply)
              + max_node_count       = (known after apply)
              + min_node_count       = (known after apply)
              + total_max_node_count = (known after apply)
              + total_min_node_count = (known after apply)
            }

          + management {
              + auto_repair  = (known after apply)
              + auto_upgrade = (known after apply)
            }

          + network_config {
              + create_pod_range     = (known after apply)
              + enable_private_nodes = (known after apply)
              + pod_ipv4_cidr_block  = (known after apply)
              + pod_range            = (known after apply)
            }

          + node_config {
              + boot_disk_kms_key = (known after apply)
              + disk_size_gb      = (known after apply)
              + disk_type         = (known after apply)
              + guest_accelerator = (known after apply)
              + image_type        = (known after apply)
              + labels            = (known after apply)
              + local_ssd_count   = (known after apply)
              + logging_variant   = (known after apply)
              + machine_type      = (known after apply)
              + metadata          = (known after apply)
              + min_cpu_platform  = (known after apply)
              + node_group        = (known after apply)
              + oauth_scopes      = (known after apply)
              + preemptible       = (known after apply)
              + resource_labels   = (known after apply)
              + service_account   = (known after apply)
              + spot              = (known after apply)
              + tags              = (known after apply)
              + taint             = (known after apply)

              + ephemeral_storage_config {
                  + local_ssd_count = (known after apply)
                }

              + gcfs_config {
                  + enabled = (known after apply)
                }

              + gvnic {
                  + enabled = (known after apply)
                }

              + kubelet_config {
                  + cpu_cfs_quota        = (known after apply)
                  + cpu_cfs_quota_period = (known after apply)
                  + cpu_manager_policy   = (known after apply)
                }

              + linux_node_config {
                  + sysctls = (known after apply)
                }

              + reservation_affinity {
                  + consume_reservation_type = (known after apply)
                  + key                      = (known after apply)
                  + values                   = (known after apply)
                }

              + sandbox_config {
                  + sandbox_type = (known after apply)
                }

              + shielded_instance_config {
                  + enable_integrity_monitoring = (known after apply)
                  + enable_secure_boot          = (known after apply)
                }

              + workload_metadata_config {
                  + mode = (known after apply)
                }
            }

          + placement_policy {
              + type = (known after apply)
            }

          + upgrade_settings {
              + max_surge       = (known after apply)
              + max_unavailable = (known after apply)
              + strategy        = (known after apply)

              + blue_green_settings {
                  + node_pool_soak_duration = (known after apply)

                  + standard_rollout_policy {
                      + batch_node_count    = (known after apply)
                      + batch_percentage    = (known after apply)
                      + batch_soak_duration = (known after apply)
                    }
                }
            }
        }

      + node_pool_auto_config {
          + network_tags {
              + tags = (known after apply)
            }
        }

      + node_pool_defaults {
          + node_config_defaults {
              + logging_variant = (known after apply)

              + gcfs_config {
                  + enabled = (known after apply)
                }
            }
        }

      + notification_config {
          + pubsub {
              + enabled = (known after apply)
              + topic   = (known after apply)

              + filter {
                  + event_type = (known after apply)
                }
            }
        }

      + private_cluster_config {
          + enable_private_nodes   = true
          + master_ipv4_cidr_block = "10.46.0.0/28"
          + peering_name           = (known after apply)
          + private_endpoint       = (known after apply)
          + public_endpoint        = (known after apply)

          + master_global_access_config {
              + enabled = (known after apply)
            }
        }

      + release_channel {
          + channel = "STABLE"
        }

      + service_external_ips_config {
          + enabled = (known after apply)
        }

      + tpu_config {
          + enabled                = (known after apply)
          + ipv4_cidr_block        = (known after apply)
          + use_service_networking = (known after apply)
        }

      + vertical_pod_autoscaling {
          + enabled = (known after apply)
        }

      + workload_identity_config {
          + workload_pool = "cloudops-pwolthausen-sandbox.svc.id.goog"
        }
    }

  # google_container_node_pool.primary_nodes will be created
  + resource "google_container_node_pool" "primary_nodes" {
      + cluster                     = "gke-pw-nane1-01"
      + id                          = (known after apply)
      + initial_node_count          = (known after apply)
      + instance_group_urls         = (known after apply)
      + location                    = "northamerica-northeast1"
      + managed_instance_group_urls = (known after apply)
      + max_pods_per_node           = (known after apply)
      + name                        = "narwhal"
      + name_prefix                 = (known after apply)
      + node_count                  = 2
      + node_locations              = (known after apply)
      + operation                   = (known after apply)
      + project                     = "cloudops-pwolthausen-sandbox"
      + version                     = (known after apply)

      + management {
          + auto_repair  = (known after apply)
          + auto_upgrade = (known after apply)
        }

      + network_config {
          + create_pod_range     = (known after apply)
          + enable_private_nodes = (known after apply)
          + pod_ipv4_cidr_block  = (known after apply)
          + pod_range            = (known after apply)
        }

      + node_config {
          + disk_size_gb      = (known after apply)
          + disk_type         = (known after apply)
          + guest_accelerator = (known after apply)
          + image_type        = (known after apply)
          + labels            = {
              + "env" = "gke-pw-nane1-01"
            }
          + local_ssd_count   = (known after apply)
          + logging_variant   = "DEFAULT"
          + machine_type      = "n1-standard-1"
          + metadata          = {
              + "disable-legacy-endpoints" = "true"
            }
          + min_cpu_platform  = (known after apply)
          + oauth_scopes      = [
              + "https://www.googleapis.com/auth/devstorage.read_only",
              + "https://www.googleapis.com/auth/logging.write",
              + "https://www.googleapis.com/auth/monitoring",
              + "https://www.googleapis.com/auth/service.management.readonly",
              + "https://www.googleapis.com/auth/servicecontrol",
              + "https://www.googleapis.com/auth/trace.append",
            ]
          + preemptible       = false
          + service_account   = "80612684543-compute@developer.gserviceaccount.com"
          + spot              = false
          + tags              = [
              + "gke-node",
              + "gke-pw-nane1-01",
              + "gke-bell-network-common-nbd-gke-npe-cluster",
            ]
          + taint             = (known after apply)

          + shielded_instance_config {
              + enable_integrity_monitoring = (known after apply)
              + enable_secure_boot          = (known after apply)
            }

          + workload_metadata_config {
              + mode = (known after apply)
            }
        }

      + upgrade_settings {
          + max_surge       = (known after apply)
          + max_unavailable = (known after apply)
          + strategy        = (known after apply)

          + blue_green_settings {
              + node_pool_soak_duration = (known after apply)

              + standard_rollout_policy {
                  + batch_node_count    = (known after apply)
                  + batch_percentage    = (known after apply)
                  + batch_soak_duration = (known after apply)
                }
            }
        }
    }

  # google_service_networking_connection.private_vpc_connection will be created
  + resource "google_service_networking_connection" "private_vpc_connection" {
      + id                      = (known after apply)
      + network                 = (known after apply)
      + peering                 = (known after apply)
      + reserved_peering_ranges = [
          + "postgres-ip-address",
        ]
      + service                 = "servicenetworking.googleapis.com"
    }

  # google_sql_database_instance.instance will be created
  + resource "google_sql_database_instance" "instance" {
      + available_maintenance_versions = (known after apply)
      + connection_name                = (known after apply)
      + database_version               = "POSTGRES_14"
      + deletion_protection            = false
      + encryption_key_name            = (known after apply)
      + first_ip_address               = (known after apply)
      + id                             = (known after apply)
      + ip_address                     = (known after apply)
      + maintenance_version            = (known after apply)
      + master_instance_name           = (known after apply)
      + name                           = (known after apply)
      + private_ip_address             = (known after apply)
      + project                        = (known after apply)
      + public_ip_address              = (known after apply)
      + region                         = "northamerica-northeast1"
      + self_link                      = (known after apply)
      + server_ca_cert                 = (known after apply)
      + service_account_email_address  = (known after apply)

      + replica_configuration {
          + ca_certificate            = (known after apply)
          + client_certificate        = (known after apply)
          + client_key                = (known after apply)
          + connect_retry_interval    = (known after apply)
          + dump_file_path            = (known after apply)
          + failover_target           = (known after apply)
          + master_heartbeat_period   = (known after apply)
          + password                  = (sensitive value)
          + ssl_cipher                = (known after apply)
          + username                  = (known after apply)
          + verify_server_certificate = (known after apply)
        }

      + settings {
          + activation_policy     = "ALWAYS"
          + availability_type     = "ZONAL"
          + connector_enforcement = (known after apply)
          + disk_autoresize       = true
          + disk_autoresize_limit = 0
          + disk_size             = (known after apply)
          + disk_type             = "PD_SSD"
          + pricing_plan          = "PER_USE"
          + tier                  = "db-f1-micro"
          + user_labels           = (known after apply)
          + version               = (known after apply)

          + backup_configuration {
              + binary_log_enabled             = (known after apply)
              + enabled                        = (known after apply)
              + location                       = (known after apply)
              + point_in_time_recovery_enabled = (known after apply)
              + start_time                     = (known after apply)
              + transaction_log_retention_days = (known after apply)

              + backup_retention_settings {
                  + retained_backups = (known after apply)
                  + retention_unit   = (known after apply)
                }
            }

          + ip_configuration {
              + ipv4_enabled    = false
              + private_network = (known after apply)
            }

          + location_preference {
              + follow_gae_application = (known after apply)
              + secondary_zone         = (known after apply)
              + zone                   = (known after apply)
            }
        }
    }

  # random_id.db_name_suffix will be created
  + resource "random_id" "db_name_suffix" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 4
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.core_network.module.firewall_rules.google_compute_firewall.rules["fw-pw-core-allow-internal"] will be created
  + resource "google_compute_firewall" "rules" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "fw-pw-core-allow-internal"
      + network            = "vpc-pw-core"
      + priority           = 100
      + project            = "cloudops-pwolthausen-sandbox"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "10.0.0.0/20",
          + "192.168.0.0/19",
        ]

      + allow {
          + ports    = []
          + protocol = "all"
        }
    }

  # module.core_network.module.firewall_rules.google_compute_firewall.rules["fw-pw-core-allow-ssh"] will be created
  + resource "google_compute_firewall" "rules" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "fw-pw-core-allow-ssh"
      + network            = "vpc-pw-core"
      + priority           = 100
      + project            = "cloudops-pwolthausen-sandbox"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "142.115.192.119/32",
        ]
      + target_tags        = [
          + "bastion",
        ]

      + allow {
          + ports    = [
              + "22",
            ]
          + protocol = "TCP"
        }
    }

  # module.core_network.module.subnets.google_compute_subnetwork.subnetwork["northamerica-northeast1/dublin"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "192.168.0.0/23"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "dublin"
      + network                    = "vpc-pw-core"
      + private_ip_google_access   = true
      + private_ipv6_google_access = (known after apply)
      + project                    = "cloudops-pwolthausen-sandbox"
      + purpose                    = (known after apply)
      + region                     = "northamerica-northeast1"
      + secondary_ip_range         = [
          + {
              + ip_cidr_range = "10.0.0.0/21"
              + range_name    = "pod-cidr"
            },
          + {
              + ip_cidr_range = "10.0.8.0/23"
              + range_name    = "service-cidr-0"
            },
          + {
              + ip_cidr_range = "10.0.10.0/23"
              + range_name    = "service-cidr-1"
            },
          + {
              + ip_cidr_range = "10.0.12.0/23"
              + range_name    = "service-cidr-2"
            },
          + {
              + ip_cidr_range = "10.0.14.0/23"
              + range_name    = "service-cidr-3"
            },
        ]
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.core_network.module.vpc.google_compute_network.network will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks         = false
      + delete_default_routes_on_create = false
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + internal_ipv6_range             = (known after apply)
      + mtu                             = 0
      + name                            = "vpc-pw-core"
      + project                         = "cloudops-pwolthausen-sandbox"
      + routing_mode                    = "GLOBAL"
      + self_link                       = (known after apply)
    }

Plan: 13 to add, 0 to change, 0 to destroy.
